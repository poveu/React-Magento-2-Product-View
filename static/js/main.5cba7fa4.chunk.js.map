{"version":3,"sources":["helpers/api.js","helpers/routes.js","helpers/ProductApi.js","components/ProductGallerySelectedImage.js","components/ProductGallery.js","components/ProductDetails.js","components/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["apiCall","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","path","method","errorHandler","wrap","_context","prev","next","fetch","URL","headers","Accept","Content-Type","body","JSON","stringify","then","response","ok","status","redirected","create","message","json","catch","error","console","log","abrupt","sent","stop","this","_x","_x2","_x3","apply","arguments","getProduct","sku","api","ProductGallerySelectedImage","state","fadeIn","_this","setState","_this2","_this$props","props","imagesLoaded","imagePath","selectedImage","react_default","createElement","className","concat","includes","key","src","alt","onLoad","Component","ProductGallery","updateImagesLoadedList","loadedImagePath","newArray","slice","push","selectImage","componentDidUpdate","productData","custom_attributes","find","obj","attribute_code","value","_this$state","ProductGallerySelectedImage_ProductGallerySelectedImage","media_gallery_entries","map","mediaItem","i","file","onClick","ProductDetails","SKU","match","params","errorMessage","class","Link","to","process","getProductData","ProductApi","componentDidMount","ProductGallery_ProductGallery","name","price","dangerouslySetInnerHTML","__html","MainScreen","App","BrowserRouter","basename","Switch","Route","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cba7fa4.chunk.js","sourcesContent":["import { API_URL } from './routes'\r\n\r\nexport const apiCall = async (path, method, errorHandler) => {\r\n    return await fetch(API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            path: path,\r\n            method: method,\r\n        })\r\n    }).then(response => {\r\n        if (!response.ok) {\r\n            throw response.status\r\n        } else if (response.redirected) {\r\n            throw Object.create({\r\n                message: 'Nastąpiła próba przekierowania żądania po stronie serwera.'\r\n            })\r\n        }\r\n        return response;\r\n    })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            return json\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            errorHandler(error)\r\n        })\r\n}","const URL = 'https://dev.sklep.balticad.eu/'\r\nconst API_PATH = 'paveart/api.php'\r\nconst IMAGES_PATH = 'pub/media/catalog/product'\r\n\r\nexport const IMAGES_URL = URL + IMAGES_PATH\r\nexport const API_URL = URL + API_PATH","import * as api from './api'\r\n\r\nexport const getProduct = async (sku, errorHandler) => {\r\n    return await api.apiCall('products/' + sku, \"GET\", errorHandler)\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ProductGallerySelectedImage extends Component {\r\n\r\n    state = {\r\n        fadeIn: false\r\n    }\r\n\r\n    fadeIn = () => {\r\n        if (!this.state.fadeIn) {\r\n            this.setState({\r\n                fadeIn: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { imagesLoaded, imagePath, selectedImage } = this.props;\r\n\r\n        return (\r\n            <div className=\"productImageSelected loaderContainer\">\r\n\r\n                <div className={`productImage loaderContainer ${(selectedImage && imagesLoaded.includes(selectedImage)) ? \"loaded\" : \"loading\"}`} >\r\n                    {(selectedImage) &&\r\n                        <img\r\n                            key={imagePath + selectedImage}\r\n                            src={imagePath + selectedImage}\r\n                            className={(this.state.fadeIn) ? \"fadeIn\" : \"\"}\r\n                            alt=\"Podgląd zdjęcia\"\r\n                            onLoad={() => this.fadeIn()}\r\n                        />\r\n                    }\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport ProductGallerySelectedImage from './ProductGallerySelectedImage';\r\n\r\nexport default class ProductGallery extends Component {\r\n\r\n    state = {\r\n        selectedImage: null,\r\n        imagesLoaded: []\r\n    }\r\n\r\n    updateImagesLoadedList = (loadedImagePath) => {\r\n        //Add new image path to loaded list\r\n        var newArray = this.state.imagesLoaded.slice();\r\n        newArray.push(loadedImagePath);\r\n\r\n        this.setState({\r\n            imagesLoaded: newArray\r\n        })\r\n    }\r\n\r\n    selectImage = (path) => {\r\n        //Select clicked image to preview it\r\n        if (this.state.imagesLoaded.includes(path)) {\r\n            this.setState({\r\n                selectedImage: path\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        //Select main photo first\r\n        if (this.props.productData && this.state.selectedImage === null) {\r\n            this.setState({\r\n                selectedImage: this.props.productData.custom_attributes.find(obj => {\r\n                    return obj.attribute_code === 'image'\r\n                }).value\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { selectedImage, imagesLoaded } = this.state;\r\n        const { imagePath, productData } = this.props;\r\n\r\n        return (\r\n            <div className=\"col\">\r\n\r\n                <ProductGallerySelectedImage\r\n                    imagesLoaded={imagesLoaded}\r\n                    imagePath={imagePath}\r\n                    selectedImage={selectedImage}\r\n                />\r\n\r\n                <div className=\"productImagesThumbnails loaderContainer\">\r\n                    {(productData) && productData.media_gallery_entries.map((mediaItem, i) => {\r\n                        return (\r\n                            <div key={i} className={`productImage loaderContainer ${(mediaItem.file === selectedImage) && \"selected\"} ${(imagesLoaded.includes(mediaItem.file)) ? \"loaded\" : \"loading\"}`} >\r\n                                {(mediaItem.file === selectedImage || imagesLoaded.includes(selectedImage)) &&\r\n                                    <img\r\n                                        src={imagePath + mediaItem.file}\r\n                                        onLoad={() => this.updateImagesLoadedList(mediaItem.file)}\r\n                                        onClick={() => this.selectImage(mediaItem.file)}\r\n                                        alt={`Zdjęcie nr ${i + 1}`}\r\n                                    />\r\n                                }\r\n\r\n                            </div >\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { IMAGES_URL } from '../helpers/routes'\r\n\r\nimport * as ProductApi from '../helpers/ProductApi'\r\nimport ProductGallery from './ProductGallery'\r\n\r\nexport default class ProductDetails extends Component {\r\n\r\n    SKU = this.props.match.params.sku\r\n\r\n    state = {\r\n        productData: null,\r\n        imagesLoaded: [],\r\n        error: null\r\n    }\r\n\r\n    errorHandler = error => {\r\n\r\n        var errorMessage;\r\n\r\n        if (error.message) {\r\n            if (error.message === \"The product that was requested doesn't exist. Verify the product and try again.\") {\r\n                errorMessage =\r\n                    <div>\r\n                        <h1>Nie znaleziono produktu</h1>\r\n                        Produkt o SKU {this.SKU} nie istnieje.\r\n                        <div class=\"button\"><Link to={`${process.env.PUBLIC_URL}/`}>Wróć do strony głównej</Link></div>\r\n                    </div>\r\n            } else {\r\n                errorMessage =\r\n                    <div>\r\n                        <h1>Serwer zwrócił błąd</h1>\r\n                        {error.message}\r\n                    </div>\r\n            }\r\n\r\n        } else {\r\n            errorMessage =\r\n                <div>\r\n                    <h1>Błąd serwera</h1>\r\n                    Wystąpił błąd ({error}) po stronie serwera.\r\n                </div>\r\n        }\r\n\r\n        this.setState({\r\n            error: errorMessage\r\n        })\r\n\r\n    }\r\n\r\n    getProductData = async (sku) => {\r\n        //Load product data\r\n        await ProductApi.getProduct(sku, this.errorHandler)\r\n            .then(productData => {\r\n                if (productData) {\r\n                    if (productData.message) {\r\n                        this.errorHandler(productData)\r\n                    } else {\r\n                        this.setState({\r\n                            productData\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getProductData(this.SKU);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`productContainer ${(this.state.productData) ? \"loaded\" : \"loading\"}`} >\r\n\r\n                {(this.state.error === null) ?\r\n\r\n                    <div className=\"row\">\r\n\r\n                        <ProductGallery\r\n                            productData={this.state.productData}\r\n                            imagePath={IMAGES_URL}\r\n                        />\r\n\r\n                        <div className=\"col\">\r\n                            <div className=\"productName loaderContainer\"><h1>{(this.state.productData) && (this.state.productData.name)}</h1></div>\r\n\r\n                            <div className=\"productSku loaderContainer\">\r\n                                <div>\r\n                                    {this.state.productData &&\r\n                                        <div>\r\n                                            <span>SKU:</span> {this.SKU}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"productPrice loaderContainer\">\r\n                                <div>\r\n                                    {this.state.productData &&\r\n                                        <div>\r\n                                            <span>{this.state.productData.price}</span> zł\r\n                                </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"productDescription loaderContainer\">\r\n                                <div dangerouslySetInnerHTML={this.state.productData && {\r\n                                    __html: this.state.productData.custom_attributes.find(obj => {\r\n                                        return obj.attribute_code === 'description'\r\n                                    }).value\r\n                                }}>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    :\r\n                    <div className=\"error\">\r\n                        {this.state.error}\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class MainScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to={`${process.env.PUBLIC_URL}/product/BA-GPS-M0020-5M0-FAK`}>BA-GPS-M0020-5M0-FAK</Link>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport './App.css';\r\n\r\nimport ProductDetails from './components/ProductDetails'\r\nimport MainScreen from './components/MainScreen';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route path=\"/\" component={MainScreen} />\r\n            <Route exact path=\"/product/:sku\" component={ProductDetails} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}